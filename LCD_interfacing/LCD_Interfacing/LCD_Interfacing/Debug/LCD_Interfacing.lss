
LCD_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094d  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ef  00000000  00000000  00000be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000358  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000296  00000000  00000000  000018cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:
#define en_low() PORTD &=~(1<<3)
 #define lcd_port PORTB
 
void lcd_cmd(unsigned char cmd)
 {
	 lcd_port=cmd;
  6c:	88 bb       	out	0x18, r24	; 24
	 rs_low();
  6e:	82 b3       	in	r24, 0x12	; 18
  70:	8b 7f       	andi	r24, 0xFB	; 251
  72:	82 bb       	out	0x12, r24	; 18
	 en_high();
  74:	82 b3       	in	r24, 0x12	; 18
  76:	88 60       	ori	r24, 0x08	; 8
  78:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	8f e9       	ldi	r24, 0x9F	; 159
  7c:	9f e0       	ldi	r25, 0x0F	; 15
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <lcd_cmd+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <lcd_cmd+0x18>
  84:	00 00       	nop
	 _delay_ms(1);
	 en_low(); 
  86:	82 b3       	in	r24, 0x12	; 18
  88:	87 7f       	andi	r24, 0xF7	; 247
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	08 95       	ret

0000008e <lcd_data>:
 }
void lcd_data(unsigned char data)
  {
	  lcd_port=data;
  8e:	88 bb       	out	0x18, r24	; 24
	 rs_high();
  90:	82 b3       	in	r24, 0x12	; 18
  92:	84 60       	ori	r24, 0x04	; 4
  94:	82 bb       	out	0x12, r24	; 18
	  en_high();
  96:	82 b3       	in	r24, 0x12	; 18
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	8f e9       	ldi	r24, 0x9F	; 159
  9e:	9f e0       	ldi	r25, 0x0F	; 15
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_data+0x12>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_data+0x18>
  a6:	00 00       	nop
	  _delay_ms(1);
	  en_low();
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	87 7f       	andi	r24, 0xF7	; 247
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	08 95       	ret

000000b0 <lcd_init>:
  }
  void lcd_init()
  {
	  lcd_cmd(0x38);
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <lcd_init+0xc>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <lcd_init+0x16>
  c6:	00 00       	nop
	  _delay_ms(500);
	 lcd_cmd(0x02);
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <lcd_init+0x24>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_init+0x2e>
  de:	00 00       	nop
	  _delay_ms(500);
	  lcd_cmd(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <lcd_init+0x3c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_init+0x46>
  f6:	00 00       	nop
	_delay_ms(500);
	lcd_cmd(0x0C);
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 e6       	ldi	r24, 0x69	; 105
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <lcd_init+0x54>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_init+0x5e>
 10e:	00 00       	nop
	_delay_ms(500);
	lcd_cmd(0x06);
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	89 e6       	ldi	r24, 0x69	; 105
 11a:	98 e1       	ldi	r25, 0x18	; 24
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <lcd_init+0x6c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_init+0x76>
 126:	00 00       	nop
	_delay_ms(500);
	 lcd_cmd(0x80);
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <lcd_init+0x84>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x8e>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <main>:
  }


int main(void)
{
	DDRB =0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	87 bb       	out	0x17, r24	; 23
	DDRD |=(1<<2);
 146:	81 b3       	in	r24, 0x11	; 17
 148:	84 60       	ori	r24, 0x04	; 4
 14a:	81 bb       	out	0x11, r24	; 17
	DDRD |=(1<<3);
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	81 bb       	out	0x11, r24	; 17
	lcd_init();
 152:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_init>
	
	lcd_data('H');
 156:	88 e4       	ldi	r24, 0x48	; 72
 158:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('A');
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('R');
 162:	82 e5       	ldi	r24, 0x52	; 82
 164:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('E');
 168:	85 e4       	ldi	r24, 0x45	; 69
 16a:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data(' ');
 16e:	80 e2       	ldi	r24, 0x20	; 32
 170:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('K');
 174:	8b e4       	ldi	r24, 0x4B	; 75
 176:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('R');
 17a:	82 e5       	ldi	r24, 0x52	; 82
 17c:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('I');
 180:	89 e4       	ldi	r24, 0x49	; 73
 182:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('S');
 186:	83 e5       	ldi	r24, 0x53	; 83
 188:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('H');
 18c:	88 e4       	ldi	r24, 0x48	; 72
 18e:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('N');
 192:	8e e4       	ldi	r24, 0x4E	; 78
 194:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
	lcd_data('A');
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 19e:	ff cf       	rjmp	.-2      	; 0x19e <main+0x5c>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
